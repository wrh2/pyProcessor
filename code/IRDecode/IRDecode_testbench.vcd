$date
    Sun May 29 20:08:05 2016
$end
$version
    MyHDL 0.9.0
$end
$timescale
    1ns
$end

$scope module IRDecode_testbench $end
$var real 1 ! cycles $end
$var reg 1 " notHalt $end
$var reg 1 # clk $end
$var reg 1 $ BN $end
$var reg 1 % J $end
$var reg 32 & Ins $end
$var reg 1 ' BP $end
$var reg 8 ( Addr0 $end
$var reg 8 ) Addr1 $end
$var reg 8 * Addr2 $end
$var reg 1 + BEQ $end
$var reg 1 , NOP $end
$var reg 1 - BZ $end
$var reg 8 . op $end
$scope module ird_inst $end
$var reg 1 " notHalt $end
$var reg 1 # clk $end
$var reg 1 $ BN $end
$var reg 1 % J $end
$var reg 32 & Ins $end
$var reg 1 ' BP $end
$var reg 8 ( Addr0 $end
$var reg 8 ) Addr1 $end
$var reg 8 * Addr2 $end
$var reg 1 + BEQ $end
$var reg 1 , NOP $end
$var reg 1 - BZ $end
$var reg 8 . op $end
$upscope $end
$upscope $end

$enddefinitions $end
$dumpvars
s0 !
1"
0#
0$
0%
b00000000000011100000000100000100 &
0'
b00000000 (
b00000000 )
b00000000 *
0+
0,
0-
b00000000 .
$end
#10
1#
b00000000000010000000110000001101 &
b00001110 (
b00000001 )
b00000100 *
#20
0#
s1 !
#30
1#
b00001000 (
b00001100 )
b00001101 *
b00000011000000110000001000001000 &
#40
0#
s2 !
#50
1#
b00001001000000000000100000000000 &
b00000011 .
b00000011 (
b00000010 )
b00001000 *
#60
0#
s3 !
#70
1#
b00001001 .
b00000000 (
b00001000 )
b00000000 *
b00000111000000100000110000000011 &
#80
0#
s4 !
#90
1#
b00001001000010100000100000001110 &
b00000111 .
b00000010 (
b00001100 )
b00000011 *
1+
#100
0#
s5 !
#110
1#
b00001001 .
b00001010 (
b00001000 )
b00001110 *
0+
b00000110000010100000011100000111 &
#120
0#
s6 !
#130
1#
b00000010000011100000011000001111 &
b00000110 .
b00000111 )
b00000111 *
1+
#140
0#
s7 !
#150
1#
b00000010 .
b00001110 (
b00000110 )
b00001111 *
0+
b00001000000001110000010000000100 &
#160
0#
s8 !
#170
1#
b00001100000000100000001100001010 &
b00001000 .
b00000111 (
b00000100 )
b00000100 *
#180
0#
s9 !
#190
1#
b00001100 .
b00000010 (
b00000011 )
b00001010 *
1-
b00001001000000010000000000001111 &
#200
0#
s10 !
#210
1#
b00000110000010100000100100001100 &
b00001001 .
b00000001 (
b00000000 )
b00001111 *
0-
1%
#220
0#
s11 !
#230
1#
b00000110 .
b00001010 (
b00001001 )
b00001100 *
1+
0%
b00001010000010110000000000001011 &
#240
0#
s12 !
#250
1#
b00000101000011110000100100000010 &
b00001010 .
b00001011 (
b00000000 )
b00001011 *
0+
#260
0#
s13 !
#270
1#
b00000101 .
b00001111 (
b00001001 )
b00000010 *
1'
b00001001000010100000000000000110 &
#280
0#
s14 !
#290
1#
b00000111000011000000011100001110 &
b00001001 .
b00001010 (
b00000000 )
b00000110 *
0'
#300
0#
s15 !
#310
1#
b00000111 .
b00001100 (
b00000111 )
b00001110 *
1+
b00001110000000000000010000001101 &
#320
0#
s16 !
#330
1#
b00001101000001100000010100001110 &
b00001110 .
b00000000 (
b00000100 )
b00001101 *
0+
#340
0#
s17 !
#350
1#
b00001101 .
b00000110 (
b00000101 )
b00001110 *
1,
b00000100000010110000001000000001 &
#360
0#
s18 !
#370
1#
b00001110000010000000101100000110 &
b00000100 .
b00001011 (
b00000010 )
b00000001 *
0"
0,
#380
0#
s19 !
#390
1#
b00001110 .
b00001000 (
b00001011 )
b00000110 *
1"
b00001011000001110000011100000001 &
#400
0#
s20 !
#410
1#
b00000001000001100000000000001010 &
b00001011 .
b00000111 (
b00000111 )
b00000001 *
1,
#420
0#
s21 !
#430
1#
b00000001 .
b00000110 (
b00000000 )
b00001010 *
1$
0,
b00000110000000000000000100000100 &
#440
0#
s22 !
#450
1#
b00000011000000110000101100000100 &
b00000110 .
b00000000 (
b00000001 )
b00000100 *
0$
#460
0#
s23 !
#470
1#
b00000011 .
b00000011 (
b00001011 )
b00001101000001100000110000000010 &
#480
0#
s24 !
#490
1#
b00000001000010110000000000000101 &
b00001101 .
b00000110 (
b00001100 )
b00000010 *
#500
0#
s25 !
